#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßÆ M√ìDULO CENTRALIZADO - C√ÅLCULOS ENEL
üìä FUN√á√ÉO: Fun√ß√£o √∫nica para todos os c√°lculos de m√©dia e diferen√ßa percentual
üéØ OBJETIVO: Evitar discrep√¢ncias entre planilha e alertas
üë®‚Äçüíº AUTOR: Centraliza√ß√£o para manuten√ß√£o √∫nica
"""

def calcular_media_e_diferenca_enel(historico_consumo):
    """
    FUN√á√ÉO CENTRALIZADA - C√°lculo de m√©dia e diferen√ßa percentual ENEL
    
    Esta fun√ß√£o deve ser usada por:
    1. Gera√ß√£o de planilhas (src/pdf/processor.py)  
    2. Sistema de alertas (processor/alertas/alert_processor.py)
    3. Qualquer outro local que precise desses c√°lculos
    
    F√ìRMULA OFICIAL ENEL:
    1. Hist√≥rico ordenado por data (mais recente primeiro)
    2. Consumo atual = primeiro registro
    3. M√©dia dos 6 meses ANTERIORES (excluindo atual)
    4. Diferen√ßa percentual = ((atual - m√©dia) / m√©dia * 100)
    
    Args:
        historico_consumo (list): Lista ordenada por data DESC
                                 [{"mes_ano": "12/2024", "consumo": 850, "tipo": "ATUAL"}, ...]
        
    Returns:
        tuple: (consumo_atual, media_6_meses, diferenca_percentual)
               (float, float, float)
    """
    try:
        if not historico_consumo or len(historico_consumo) < 1:
            return 0, 0, 0
        
        # 1. Consumo atual (primeiro da lista, mais recente)
        consumo_atual = float(historico_consumo[0].get("consumo", 0))
        
        if len(historico_consumo) < 2:
            # S√≥ tem o registro atual, n√£o h√° hist√≥rico para m√©dia
            return consumo_atual, 0, 0
        
        # 2. √öltimos 6 meses ANTERIORES (excluindo o atual)
        # Pega do √≠ndice 1 at√© 7 (m√°ximo 6 registros)
        ultimos_6_meses = historico_consumo[1:7] if len(historico_consumo) >= 7 else historico_consumo[1:]
        
        if not ultimos_6_meses:
            return consumo_atual, 0, 0
        
        # 3. Calcular m√©dia simples dos 6 meses anteriores
        consumos_6_meses = []
        for item in ultimos_6_meses:
            try:
                consumo = float(item.get("consumo", 0))
                if consumo > 0:  # S√≥ considerar consumos v√°lidos
                    consumos_6_meses.append(consumo)
            except (ValueError, TypeError):
                continue
        
        if not consumos_6_meses:
            return consumo_atual, 0, 0
        
        media_6_meses = sum(consumos_6_meses) / len(consumos_6_meses)
        
        # 4. Calcular diferen√ßa percentual
        if media_6_meses > 0 and consumo_atual is not None:
            diferenca_percentual = ((consumo_atual - media_6_meses) / media_6_meses * 100)
        else:
            diferenca_percentual = 0
        
        # Debug opcional (comentar em producao)
        print(f"Calculo ENEL centralizado:")
        print(f"   Consumo atual: {consumo_atual:.2f} kWh")
        print(f"   Media 6 meses: {media_6_meses:.2f} kWh ({len(consumos_6_meses)} registros validos)")
        print(f"   Diferenca: {diferenca_percentual:+.1f}%")
        
        return consumo_atual, media_6_meses, diferenca_percentual
        
    except Exception as e:
        print(f"ERRO no calculo centralizado ENEL: {e}")
        return 0, 0, 0

def validar_historico_consumo(historico_consumo):
    """
    Validar formato do hist√≥rico de consumo
    
    Args:
        historico_consumo (list): Hist√≥rico para validar
        
    Returns:
        bool: True se formato est√° correto
    """
    try:
        if not isinstance(historico_consumo, list):
            return False
        
        if len(historico_consumo) < 1:
            return False
        
        # Verificar se primeiro item tem os campos necess√°rios
        primeiro_item = historico_consumo[0]
        if not isinstance(primeiro_item, dict):
            return False
        
        if "consumo" not in primeiro_item:
            return False
        
        # Tentar converter consumo para float
        try:
            float(primeiro_item["consumo"])
        except (ValueError, TypeError):
            return False
        
        return True
        
    except Exception:
        return False

# Fun√ß√£o de compatibilidade (wrapper) para n√£o quebrar c√≥digo existente
def calcular_media_consumo_enel(historico_consumo):
    """
    WRAPPER: Manter compatibilidade com c√≥digo existente
    Redireciona para a fun√ß√£o centralizada
    """
    return calcular_media_e_diferenca_enel(historico_consumo)