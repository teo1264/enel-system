# üöÄ ENEL Sistema - Configura√ß√£o Render Deploy
# 
# Configura√ß√£o para deploy do sistema ENEL no Render
# Baseado no BRK funcionando com adapta√ß√µes espec√≠ficas

services:
  - type: web
    name: enel-sistema
    env: python
    plan: free
    
    # üì¶ Build Configuration
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    
    # üåê Network Configuration  
    healthCheckPath: /health
    
    # üìÅ Persistent Storage (CR√çTICO para SQLite + tokens + PDFs)
    disk:
      name: enel-storage
      mountPath: /opt/render/project/storage
      sizeGB: 1
    
    # üîí Environment Variables (Configure no Dashboard do Render)
    envVars:
      - key: MICROSOFT_CLIENT_ID
        sync: false  # Configurar manualmente no Dashboard
      
      - key: PASTA_ENEL_ID  
        sync: false  # Configurar manualmente no Dashboard
        
      - key: ONEDRIVE_ROOT_ID
        sync: false  # ID da raiz OneDrive
        
      - key: ONEDRIVE_PASTA_ENEL_ID
        sync: false  # ID da pasta /ENEL/
        
      - key: ONEDRIVE_PASTA_FATURAS_ENEL_ID
        sync: false  # ID da pasta /ENEL/Faturas/
        
      - key: ONEDRIVE_PASTA_PLANILHAS_ENEL_ID
        sync: false  # ID da pasta /ENEL/Planilhas/
        
      - key: MICROSOFT_TENANT_ID
        value: consumers  # Valor padr√£o para contas pessoais
        
      - key: SENHA_PDF_ENEL
        value: "05150"  # Senha padr√£o ENEL
        
      - key: PORT
        value: 8080  # Render define automaticamente
        
      - key: SECRET_KEY
        sync: false  # Gerar chave secreta no Dashboard
        
    # üîÑ Auto Deploy
    autoDeploy: true
    
    # üìã Configura√ß√µes Adicionais
    region: oregon  # Regi√£o padr√£o (pode alterar)
    
    # üõ°Ô∏è Health Check
    healthCheckPath: /health
    healthCheckGracePeriod: 30s

# üìù Instru√ß√µes de Deploy ENEL:
#
# 1. ESTRUTURA CRIADA:
#    - app.py ‚Üí Interface Flask principal
#    - auth/microsoft_auth.py ‚Üí Autentica√ß√£o Microsoft Graph
#    - processor/email_processor.py ‚Üí Download de emails ENEL
#    - processor/pdf_processor.py ‚Üí Processamento PDFs
#    - requirements.txt ‚Üí Depend√™ncias
#
# 2. VARI√ÅVEIS OBRIGAT√ìRIAS (configurar no Dashboard):
#    - MICROSOFT_CLIENT_ID = seu_client_id_azure
#    - PASTA_ENEL_ID = id_da_pasta_enel_no_outlook
#    - SECRET_KEY = chave_secreta_flask (gerar)
#
# 3. VARI√ÅVEIS OPCIONAIS:
#    - ONEDRIVE_ENEL_ID = para salvar planilhas no OneDrive
#    - SENHA_PDF_ENEL = senha PDFs (padr√£o: 05150)
#
# 4. ENDPOINTS DISPON√çVEIS AP√ìS DEPLOY:
#    - / ‚Üí Dashboard principal
#    - /upload-token ‚Üí Upload seguro do token.json
#    - /processar-emails-form ‚Üí Interface processamento
#    - /diagnostico-pasta ‚Üí Verificar conectividade
#    - /health ‚Üí Health check para monitoramento
#
# 5. FLUXO DE USO:
#    - Deploy no Render ‚Üí Configurar vari√°veis ‚Üí Upload token ‚Üí Usar interface
#    - Token ser√° criptografado e salvo no persistent storage
#    - PDFs processados salvos no storage permanente
#    - Planilhas Excel geradas automaticamente
#
# 6. FUNCIONALIDADES ENEL:
#    - Download autom√°tico emails da pasta ENEL
#    - Remo√ß√£o prote√ß√£o PDFs (senha 05150)
#    - Extra√ß√£o dados faturas (instala√ß√£o, NF, valor, consumo)
#    - Gera√ß√£o planilhas Excel organizadas
#    - Interface web responsiva
#
# 7. DEPLOY PROCESS:
#    - GitHub push ‚Üí Auto deploy
#    - Build ‚Üí pip install requirements.txt
#    - Start ‚Üí python app.py (servidor Flask)
#    - Health ‚Üí /health endpoint ativo
#
# ‚ö° PERFORMANCE OTIMIZADA:
# - Modules separados = carregamento r√°pido
# - Imports condicionais = funciona sem todas depend√™ncias
# - Processamento isolado = melhor debugging
# - Interface intuitiva = f√°cil uso
#
# üîÆ PREPARADO PARA CRESCIMENTO:
# - auth/ pronto para diferentes provedores
# - processor/ modular para novas funcionalidades  
# - app.py extens√≠vel para novas rotas
# - storage persistente para dados hist√≥ricos